import Foundation

/*
 Exercise 1.15.  The sine of an angle (specified in radians) can be computed by making use of the approximation sin x  x if x is sufficiently small, and the trigonometric identity


 to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered ``sufficiently small'' if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:

 (define (cube x) (* x x x))
 (define (p x) (- (* 3 x) (* 4 (cube x))))
 (define (sine angle)
 (if (not (> (abs angle) 0.1))
 angle
 (p (sine (/ angle 3.0)))))

 a.  How many times is the procedure p applied when (sine 12.15) is evaluated?

 b.  What is the order of growth in space and number of steps (as a function of a) used by the process generated by the sine procedure when (sine a) is evaluated?



 */

func cube(_ x: Float) -> Float {
    return x * x * x
}

func p(_ x: Float) -> Float {
    return (3 * x) * (4 * cube(x))
}

func sine(_ angle: Float) -> Float {
    return abs(angle) <= 0.1 ? angle : p(sine(angle / 3.0))
}
sine(12.25)
p(sine(4.08))
p(p(sine(1.36)))
p(p(p(sine(0.45))))
p(p(p(p(sine(0.15)))))
p(p(p(p(p(sine(0.05))))))

func numberOfSteps(_ n: Double) -> Double {
    return ceil(log(n / 0.1) / log(3))
}

// Order of Growth: Ã˜log(n)
